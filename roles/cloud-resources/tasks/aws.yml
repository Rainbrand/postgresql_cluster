---
# Dependencies
- name: Install Python dependencies
  block:
    - name: Ensure that 'python3-pip' package is present on controlling host
      ansible.builtin.package:
        name: python3-pip
        state: present
      register: package_status
      until: package_status is success
      delay: 10
      retries: 3
      delegate_to: 127.0.0.1
      run_once: true
      when: ansible_distribution != "MacOSX"

    - name: Ensure that 'boto3' dependency is present on controlling host
      ansible.builtin.pip:
        name: boto3
        extra_args: --user
      delegate_to: 127.0.0.1
      become: false
      vars:
        ansible_become: false
      run_once: true

# SSH key
- block:
    # Delete the temporary ssh key from the cloud (if exists)
    - name: "AWS: Remove temporary SSH key '{{ ssh_key_name }}' from cloud (if any)"
      amazon.aws.ec2_key:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ ssh_key_name }}"
        region: "{{ server_location }}"
        state: absent
      when:
        - ssh_key_name is defined
        - tmp_ssh_key_name is defined
        - ssh_key_name == tmp_ssh_key_name

    # if ssh_key_name and ssh_key_content is specified, add this ssh key to the cloud
    - name: "AWS: Add SSH key '{{ ssh_key_name }}' to cloud"
      amazon.aws.ec2_key:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ ssh_key_name }}"
        key_material: "{{ ssh_key_content }}"
        region: "{{ server_location }}"
        state: present
      register: ssh_key_result
      when:
        - ssh_key_name | length > 0
        - ssh_key_content | length > 0
  when: state == 'present'

# Create (if state is present)
- block:
    # if server_network is specified, get vpc id for this subnet
    - name: "AWS: Gather information about VPC for '{{ server_network }}'"
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ server_location }}"
        subnet_ids: "{{ server_network }}"
      register: vpc_subnet_info
      when: server_network | length > 0

    - name: "Set variable: vpc_id"
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_subnet_info.subnets[0].vpc_id }}"
      when:
        - server_network | length > 0
        - vpc_subnet_info.subnets[0].vpc_id is defined

    # if server_network is not specified, use default vpc subnet
    - name: "AWS: Gather information about default VPC"
      amazon.aws.ec2_vpc_net_info:
        region: "{{ server_location }}"
        filters:
          "is-default": true
      register: vpc_info
      when: server_network | length < 1

    - name: "AWS: Gather information about VPC subnet for default VPC"
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ server_location }}"
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
      register: vpc_subnet_info
      when:
        - server_network | length < 1
        - vpc_info.vpcs[0].id is defined

    - name: "Set variable: vpc_id"
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
      when:
        - server_network | length < 1
        - vpc_info.vpcs[0].id is defined

    - name: "Set variable: server_network"
      ansible.builtin.set_fact:
        server_network: "{{ vpc_subnet_info.subnets[0].id }}"
      when:
        - server_network | length < 1
        - vpc_subnet_info.subnets[0].id is defined

    # Security Group (Firewall)
    - name: "AWS: Create or modify SSH Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-public-ssh-security-group"
        state: present
        description: Allow public ssh access for deployment
        vpc_id: "{{ vpc_id }}"
        region: "{{ server_location }}"
        rules:
          - proto: tcp
            ports:
              - "{{ ansible_ssh_port | default(22) }}"
            cidr_ip: "0.0.0.0/0" # allow public ssh access for deployment
      when:
        - ssh_public_access | bool
        - firewall | bool

    - name: "AWS: Create or modify public Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-public-security-group"
        state: present
        description: Allow public database access
        vpc_id: "{{ vpc_id }}"
        region: "{{ server_location }}"
        rules:
          - proto: tcp
            ports:
              - "{{ haproxy_listen_port.master }}"
              - "{{ haproxy_listen_port.replicas }}"
              - "{{ haproxy_listen_port.replicas_sync }}"
              - "{{ haproxy_listen_port.replicas_async }}"
              - "{{ pgbouncer_listen_port }}"
              - "{{ postgresql_port }}"
              - "{{ netdata_port | default('19999') }}"
            cidr_ip: "0.0.0.0/0" # Allow from any IP
      when:
        - database_public_access | bool
        - firewall | bool

    - name: "AWS: Create or modify Private Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-private-security-group"
        state: present
        description: Enable ports for the PostgreSQL cluster
        vpc_id: "{{ vpc_id }}"
        region: "{{ server_location }}"
        rules:
          - proto: tcp
            ports:
              - "{{ ansible_ssh_port | default(22) }}"
              - "{{ haproxy_listen_port.master }}"
              - "{{ haproxy_listen_port.replicas }}"
              - "{{ haproxy_listen_port.replicas_sync }}"
              - "{{ haproxy_listen_port.replicas_async }}"
              - "{{ haproxy_listen_port.stats }}"
              - "{{ pgbouncer_listen_port }}"
              - "{{ postgresql_port }}"
              - "{{ patroni_restapi_port }}"
              - "{{ netdata_port | default('19999') }}"
              - "2379" # ETCD
              - "2380" # ETCD
              - "8300" # Consul
              - "8301" # Consul
              - "8302" # Consul
              - "8500" # Consul
              - "8600" # Consul
            cidr_ip: "{{ vpc_subnet_info.subnets[0].cidr_block }}" # Private subnet
      when: firewall | bool

    # Instance and volume
    - name: "AWS: Create or modify EC2 instance"
      amazon.aws.ec2_instance:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
        state: present
        instance_type: "{{ server_type }}"
        image_id: "{{ server_image }}"
        key_name: "{{ ssh_key_name }}"
        region: "{{ server_location }}"
        security_groups: "{{ security_groups_list }}"
        vpc_subnet_id: "{{ server_network }}"
        network:
          assign_public_ip: true
          delete_on_termination: true
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: "{{ volume_type | default('gp3', true) }}"
              volume_size: "{{ system_volume_size | default('40') }}"  # system disk size
              delete_on_termination: true
          - device_name: /dev/sdb
            ebs:
              volume_type: "{{ volume_type | default('gp3', true) }}"
              volume_size: "{{ volume_size | int }}"
              delete_on_termination: true
      loop: "{{ range(0, servers_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
      register: server_result
      until:
        - server_result.instances[0].public_ip_address is defined
        - server_result.instances[0].public_ip_address | length > 0
      retries: 3
      delay: 10
      vars:
        security_groups_list: >-
          {{
            ([] if not ssh_public_access | bool else [patroni_cluster_name + '-public-ssh-security-group']) +
            ([] if not database_public_access | bool else [patroni_cluster_name + '-public-security-group']) +
            ([] if not firewall | bool else [patroni_cluster_name + '-private-security-group'])
          }}

    # Backups
    - name: "AWS: Create S3 bucket '{{ patroni_cluster_name }}'"
      amazon.aws.s3_bucket:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ patroni_cluster_name }}"
        region: "{{ server_location }}"
        state: present
        delete_public_access: true
        object_lock_enabled: "{{ aws_s3_bucket_object_lock_enabled | default(false) }}"
      when: (pgbackrest_install | bool) or (wal_g_install | bool)

    - name: "Set variable: pgbackrest_conf"
      ansible.builtin.set_fact:
        pgbackrest_conf:
          global:
            - { option: "log-level-file", value: "detail" }
            - { option: "log-path", value: "/var/log/pgbackrest" }
            - { option: "repo1-type", value: "s3" }
            - { option: "repo1-path", value: "/pgbackrest" }
            - { option: "repo1-s3-key", value: "{{ AWS_ACCESS_KEY_ID | default('') }}" }
            - { option: "repo1-s3-key-secret", value: "{{ AWS_SECRET_ACCESS_KEY | default('') }}" }
            - { option: "repo1-s3-bucket", value: "{{ AWS_S3_BUCKET | default(patroni_cluster_name) }}" }
            - { option: "repo1-s3-endpoint", value: "{{ AWS_S3_ENDPOINT | default('s3.' ~ (server_location | default('us-east-1')) ~ '.amazonaws.com') }}" }
            - { option: "repo1-s3-region", value: "{{ AWS_S3_REGION | default(server_location | default('us-east-1')) }}" }
            - { option: "repo1-retention-full", value: "{{ PGBACKREST_RETENTION_FULL | default('4') }}" }
            - { option: "repo1-retention-archive", value: "{{ PGBACKREST_RETENTION_ARCHIVE | default('4') }}" }
            - { option: "repo1-retention-archive-type", value: "{{ PGBACKREST_RETENTION_ARCHIVE_TYPE | default('full') }}" }
            - { option: "repo1-bundle", value: "y" }
            - { option: "repo1-block", value: "y" }
            - { option: "start-fast", value: "y" }
            - { option: "stop-auto", value: "y" }
            - { option: "link-all", value: "y" }
            - { option: "resume", value: "n" }
            - { option: "process-max", value: "{{ PGBACKREST_PROCESS_MAX | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          stanza:
            - { option: "log-level-console", value: "info" }
            - { option: "recovery-option", value: "recovery_target_action=promote" }
            - { option: "pg1-path", value: "{{ pg_data_mount_path | default('/pgdata') }}/{{ postgresql_version }}/{{ patroni_cluster_name }}" }
      when: pgbackrest_install | bool

    - name: "Set variable: wal_g_json"
      ansible.builtin.set_fact:
        wal_g_json:
          - { option: "AWS_ACCESS_KEY_ID", value: "{{ AWS_ACCESS_KEY_ID | default('') }}" }
          - { option: "AWS_SECRET_ACCESS_KEY", value: "{{ AWS_SECRET_ACCESS_KEY | default('') }}" }
          - { option: "WALG_S3_PREFIX", value: "{{ WALG_S3_PREFIX | default('s3://' + patroni_cluster_name) }}" }
          - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
          - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
          - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "PGDATA", value: "{{ pg_data_mount_path | default('/pgdata') }}/{{ postgresql_version }}/{{ patroni_cluster_name }}" }
          - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
          - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
          - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
      when: wal_g_install | bool
  when: state == 'present'

- name: Wait for EC2 instance to be available via SSH
  ansible.builtin.wait_for:
    host: "{{ item.instances[0].public_ip_address }}"
    port: 22
    delay: 5
    timeout: 300
  loop: "{{ server_result.results }}"
  loop_control:
    label: "{{ item.instances[0].public_ip_address | default('N/A') }}"
  when:
    - server_result.results is defined
    - item.instances is defined

# Info
- name: Show EC2 instance info
  ansible.builtin.debug:
    msg:
      - "ID: {{ item.instances[0].instance_id }}"
      - "Name: {{ item.instances[0].tags.Name }}"
      - "Image: {{ item.instances[0].image_id }}"
      - "Type: {{ item.instances[0].instance_type }}"
      - "Volume Size: {{ volume_size }} GB"
      - "Public IP: {{ item.instances[0].public_ip_address }}"
      - "Private IP: {{ item.instances[0].private_ip_address }}"
  loop: "{{ server_result.results }}"
  loop_control:
    label: "{{ item.instances[0].public_ip_address | default('N/A') }}"
  when:
    - server_result.results is defined
    - item.instances is defined

# Inventory
- block:
    - name: "Inventory | Initialize ip_addresses variable"
      ansible.builtin.set_fact:
        ip_addresses: []

    - name: "Inventory | Extract IP addresses"
      ansible.builtin.set_fact:
        ip_addresses: >-
          {{ ip_addresses +
            [{'public_ip': item.instances[0].public_ip_address,
              'private_ip': item.instances[0].private_ip_address}]
          }}
      loop: "{{ server_result.results | selectattr('instances', 'defined') }}"
      loop_control:
        label: "public_ip: {{ item.instances[0].public_ip_address }}, private_ip: {{ item.instances[0].private_ip_address }}"

    - name: "Inventory | Generate in-memory inventory"
      ansible.builtin.import_tasks: inventory.yml
  when:
    - server_result.results is defined
    - server_result.results | selectattr('instances', 'defined')

# Delete the temporary ssh key from the cloud after creating the EC2 instance
- name: "AWS: Remove temporary SSH key '{{ ssh_key_name }}' from cloud"
  amazon.aws.ec2_key:
    access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
    secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
    name: "{{ ssh_key_name }}"
    region: "{{ server_location }}"
    state: absent
  register: ssh_key_result
  when:
    - ssh_key_name is defined
    - tmp_ssh_key_name is defined
    - ssh_key_name == tmp_ssh_key_name

# Delete (if state is absent)
- block:
    - name: "AWS: Delete EC2 instance"
      amazon.aws.ec2_instance:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
        region: "{{ server_location }}"
        state: absent
      loop: "{{ range(0, servers_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"

    - name: "AWS: Delete SSH Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-public-ssh-security-group"
        state: absent
        region: "{{ server_location }}"

    - name: "AWS: Delete public Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-public-security-group"
        state: absent
        region: "{{ server_location }}"

    - name: "AWS: Delete Private Security Group"
      amazon.aws.ec2_security_group:
        name: "{{ patroni_cluster_name }}-private-security-group"
        state: absent
        region: "{{ server_location }}"

    - name: "AWS: Delete S3 bucket '{{ patroni_cluster_name }}'"
      amazon.aws.s3_bucket:
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        name: "{{ patroni_cluster_name }}"
        region: "{{ server_location }}"
        state: absent
        force: true
      when: (pgbackrest_install | bool) or (wal_g_install | bool)
  when: state == 'absent'

...
