---

- block:
    # Try to detect an empty disk (if provision != 'none')
    - name: Detect empty volume
      ansible.builtin.shell: |
        set -o pipefail;
        lsblk -e7 --output NAME,FSTYPE,TYPE --json \
          | jq -r '.blockdevices[] | select(.children == null and .fstype == null and .type == "disk") | .name'
      args:
        executable: /bin/bash
      register: lsblk_disk
      changed_when: false
      when: (provision is defined and provision | lower != 'none') and mount[0].src | length < 1

    # Show the error message, if empty volume is not detected
    - name: Empty volume is not detected
      ansible.builtin.fail:
        msg: "Whoops! The empty volume is not detected. Skip mounting."
      ignore_errors: true
      when: lsblk_disk.stdout is defined and lsblk_disk.stdout | length < 1

    # Filesystem
    - name: Create "{{ pg_data_mount_fstype | default('ext4') }}" filesystem on the disk "/dev/{{ lsblk_disk.stdout }}"
      community.general.filesystem:
        dev: "/dev/{{ lsblk_disk.stdout }}"
        fstype: "{{ pg_data_mount_fstype | default('ext4') }}"
      when: lsblk_disk.stdout is defined and lsblk_disk.stdout | length > 0

    # UUID
    - name: Get UUID of the disk "/dev/{{ lsblk_disk.stdout }}"
      ansible.builtin.shell: |
        set -o pipefail;
        lsblk -no UUID /dev/{{ lsblk_disk.stdout }} | tr -d '\n'
      args:
        executable: /bin/bash
      register: lsblk_uuid
      changed_when: false
      when: lsblk_disk.stdout is defined and lsblk_disk.stdout | length > 0

    - name: "Set variable: mount.src"
      ansible.builtin.set_fact:
        mount:
          - src: "{{ lsblk_uuid.stdout }}"
            path: "{{ pg_data_mount_path | default('/pgdata') }}"
      when: lsblk_uuid.stdout is defined

    # Mount
    - name: Mount the filesystem
      ansible.posix.mount:
        path: "{{ item.path | default(pg_data_mount_path | default('/pgdata', true), true) }}"
        src: "UUID={{ item.src }}"
        fstype: "{{ item.fstype | default(pg_data_mount_fstype | default('ext4', true), true) }}"
        opts: "{{ item.opts | default('defaults,noatime') }}"
        state: "{{ item.state | default('mounted') }}"
      loop: "{{ mount }}"
      when: item.src | length > 0

    # Set variable 'postgresql_data_dir' (if provision != 'none')
    - name: "Set variable: postgresql_data_dir"
      ansible.builtin.set_fact:
        postgresql_data_dir: "{{ pg_data_mount_path | default('/pgdata') }}/{{ postgresql_version }}/{{ patroni_cluster_name }}"
      when: (provision is defined and provision | lower != 'none') and lsblk_uuid.stdout is defined
  tags: mount

...
