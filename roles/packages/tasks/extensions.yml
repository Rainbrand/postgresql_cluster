---
# Extension Auto-Setup: packages

# TimescaleDB (if 'enable_timescale' is 'true')
- name: Install TimescaleDB package
  ansible.builtin.package:
    name: >-
      {% if postgresql_version | int >= 11 %}
      timescaledb-2-postgresql-{{ postgresql_version }}
      {% else %}
      timescaledb-postgresql-{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: (enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)
  tags: timescaledb, timescale

# pg_repack (if 'enable_pg_repack' is 'true')
- name: Install pg_repack package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ postgresql_version }}-repack
      {% else %}
      pg_repack_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_pg_repack | default(false) | bool
    - not (ansible_os_family == 'RedHat' and
          (postgresql_version is version('10', '<=') or postgresql_version is version('16', '>=')))
  tags: pg_repack

# pg_cron (if 'enable_pg_cron' is 'true')
- name: Install pg_cron package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ postgresql_version }}-cron
      {% else %}
      pg_cron_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_pg_cron | default(false) | bool
    - not (ansible_os_family == 'RedHat' and postgresql_version is version('10', '<='))
  tags: pg_cron

# pgaudit (if 'enable_pgaudit' is 'true')
- name: Install pgaudit package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
        postgresql-{{ postgresql_version }}-pgaudit
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "15" %}
        pgaudit17_{{ postgresql_version }}
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "14" %}
        pgaudit16_{{ postgresql_version }}
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "13" %}
        pgaudit15_{{ postgresql_version }}
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "12" %}
        pgaudit14_{{ postgresql_version }}
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "11" %}
        pgaudit13_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_pgaudit | default(false) | bool
    - not (ansible_os_family == 'RedHat' and
          (postgresql_version is version('10', '<=') or postgresql_version is version('16', '>=')))
  tags: pgaudit

# pgvector (if 'enable_pgvector' is 'true')
- name: Install pgvector package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ postgresql_version }}-pgvector
      {% else %}
      pgvector_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_pgvector | default(false)| bool
    - (ansible_os_family == 'Debian' and postgresql_version is version('11', '>=')) or
      (ansible_os_family == 'RedHat' and postgresql_version is version('12', '>='))
  tags: pgvector

# postgis (if 'enable_postgis' is 'true')
- name: Install postgis package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ postgresql_version }}-postgis-3
      {% elif ansible_os_family == 'RedHat' and postgresql_version == "16" %}
      postgis34_{{ postgresql_version }}
      {% else %}
      postgis33_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_postgis | default(false) | bool
  tags: postgis

# pgrouting (if 'enable_pgrouting' is 'true')
- name: Install pgrouting package
  ansible.builtin.package:
    name: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ postgresql_version }}-pgrouting-3
      {% else %}
      pgrouting_{{ postgresql_version }}
      {% endif %}
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pgrouting | default(false) | bool
  tags: pgrouting

...
