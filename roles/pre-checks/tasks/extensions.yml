# yamllint disable rule:line-length
---

# TimescaleDB pre-check (if 'enable_timescale' is 'true')
- name: TimescaleDB | Checking PostgreSQL version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "The current PostgreSQL version ({{ postgresql_version }}) is not supported by the TimescaleDB."
      - "PostgreSQL version must be {{ timescale_minimal_pg_version }} or higher."
  when: postgresql_version|string is version(timescale_minimal_pg_version|string, '<')

# Extension Auto-Setup: shared_preload_libraries
- name: Create a list of extensions
  run_once: true
  ansible.builtin.set_fact:
    extensions: >-
      {{ (extensions | default([]))
      + (['timescaledb'] if ((enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)) and (postgresql_version is version('15', '<=')) else [])
      + (['pg_cron'] if (enable_pg_cron | default(false) | bool) else [])
      + (['pgaudit'] if (enable_pgaudit | default(false) | bool) else [])
      + (['pg_stat_statements'] if (enable_pg_stat_kcache | default(false) | bool) else [])
      + (['pg_stat_kcache'] if (enable_pg_stat_kcache | default(false) | bool) else [])
      + (['pg_wait_sampling'] if (pg_wait_sampling | default(false) | bool) else [])
      }}

- name: Make sure that the required extensions are added to 'shared_preload_libraries'
  run_once: true
  ansible.builtin.set_fact:
    # This complex line does several things:
    # 1. It takes the current list of PostgreSQL parameters,
    # 2. Removes any item where the option is 'shared_preload_libraries',
    # 3. Then appends a new 'shared_preload_libraries' item at the end.
    # The new value of this item is based on whether extension is already present in the old value.
    # If it is not present, it appends ',<extension_name>' to the old value. Otherwise, it leaves the value unchanged.
    postgresql_parameters: >-
      {{ postgresql_parameters | rejectattr('option', 'equalto', 'shared_preload_libraries') | list
      + [{'option': 'shared_preload_libraries', 'value': new_value}] }}
  vars:
    # Find the last item in postgresql_parameters where the option is 'shared_preload_libraries'
    shared_preload_libraries_item: >-
      {{
        postgresql_parameters
        | selectattr('option', 'equalto', 'shared_preload_libraries')
        | list | last | default({'value': ''})
      }}
    # Determine the new value based on whether the extension is already present
    new_value: >-
      {{
        (shared_preload_libraries_item.value ~ (',' if shared_preload_libraries_item.value else '')
        if item not in shared_preload_libraries_item.value.split(',') else shared_preload_libraries_item.value)
        ~ (item if item not in shared_preload_libraries_item.value.split(',') else '')
      }}
  loop: "{{ extensions | default([]) | unique }}"
  when: extensions | default([]) | length > 0

...
